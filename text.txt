firebase

getdoc :- need document reference only.

const docRef = doc(db, "users", userId);
    const docSnap = await getDoc(docRef);

getdocs :- here we will take multiple docs. so for that we have to give query.

so query needs a (collection, query)


export const userRef = collection(db, "users");
const q = query(userRef, where("userId", "!=", user?.userId));

    const querySnapshot = await getDocs(q);

setdoc:- it also needs document ref only, because here we provide documentid.

await setDoc(doc(db, "rooms", roomId), {
      roomId,
      createdAt: Timestamp.fromDate(new Date()),
    });
  
adddoc:- it needs only collection ref, because it automatically generate document id
const docRef = doc(db, "rooms", roomId);
const messagesRef = collection(docRef, "messages");
   const newDoc = await addDoc(messagesRef, {
        userId: user?.userId,
        text: message,
        profileUrl: user?.profileUrl,
        sendername: user?.username,
        createdAt: Timestamp.fromDate(new Date()),
      });


snapshot:-

it also work as getdocs(), just difference is it working as realtime, if anything changes in it's query, it make a call






1. search (expo-router installation) and process as per it's doc

2. search nativewind for expo router, and apply code as per doc

 run with:- npx expo start --clear(--clear is for clear cache)

3. authentication in expo router(docs)

create new signIn, signOut page, also create new folder name with '(app) ' inside app folder, and create new _layout & index file

 - create context folder for auth, and createcontext component, as well as login,logout,register function.

 and create new function useAuth(), and give this all context to it

 4. in main layout page(mainroute), we will give consition for auth

 5. installed npm i react-native-responsive-screen for responsive screen for make responsive 

 6. design signin screen, and in signin we will not use 'useStae' to store email & password, , when state updates, useState renders the whole page, so instead of that we will use useRef

 7. npm i lottie-react-native, download lottie json from lottie animations and put in assets and make other components of loading
 call 
 import { StyleSheet, Text, View } from "react-native";
import React from "react";
import LottieView from "lottie-react-native";

const Loading = ({ size }) => {
  return (
    <View style={{ height: size, aspectRatio: 1 }}>
      <LottieView
        style={{ flex: 1 }}
        source={require("../assets/images/loading.json")}
        autoPlay
        loop
      />
    </View>
  );
};

export default Loading;

const styles = StyleSheet.create({});

8. after complete sign in , make signup screen.

9. now make new component, <keyboardavoidingView> to avoid keyboard.
implement {children} behaviour for wrap other components.
in behavior :- for ios we will give padding, for android we will give height
then call <Scrollview>{children}</Scrollview>

10. created ifrebaseconfig.js and getfirestore, get user and room data with collection

11. now we move on authentication, we call onauthchange in authcontext,
 if user exists, we gives setauthincated = true, otherwise false

12.we will use setDoc instead of addDoc to create the user, because in setDoc we can give user id manually, if e.message gives, 
auth-email, we have changed message to user friendly warning

catch (e) {
      let msg = e.message;

      if (msg.includes("(auth/invalid-email)")) msg = "Invalid email";
      return { success: false, msg };
    }

12. in SignUp page we call const {register} = useAuth,

and provide user's data to register function, and as per response given by that function we are showing ALert

13. now in homescreen we add logout.

const { logout } = useAuth();

  const handleLogout = async () => {
    await logout();
  };

  where in logout:-
  const logout = async () => {
    try {
      await signOut(auth);

      return { success: true };
    } catch (e) {
      return { success: false, msg: e.message, error: e };
    }
  };

  14. as same as for signIn page we will call {login} = useAuth()

  15. now get user's information in homescreen

  we are getting user from context is from auth, so it will not provide user's feild details in database.

  so we will call new function updateuserdata(user.uid) after (user) find in auth, and fetch data from database, and update in setUser({...user, username: data.username, profileurl : data.profileurl, userId:data.userId})

  in homescreen authdata which user has, will be null so it will show only username,profileurl,userId

  setUser({
        ...user,
        username: data.username,
        profileUrl: data.profileUrl,
        userId: data.userId,
      });

      if you use setUser(prevUser => ({
        ...prevUser,
        username: data.username,
        profileUrl: data.profileUrl,
        userId: data.userId,
      })); 

      it will not erase

      but we will use ...user, so data will be null

16.Chat List Header

in (app)/_layout.js, created Stake.screen for that sub-files. and to "home" Stack.screen, we have provide <Homeheader/> component as header.

17. In header we will provide different padding and height for android as well as ios
const ios = Platform.OS == "ios";
const { top } = useSafeAreaInsets();
const HomeHeader = () => {
  return (
    <View style={{ paddingTop: ios ? top : top + 10 }}></View>)}

    18. we will use expo-image to see profile pic, because expo-image load only ones, and it not load again and again

    19. now we weill install pop-up-menu library to pop up ,  when we tap on image it will show popup dialogbox

    first we will wrap whole app with <MenuProvider/>

    then we will call <Menu><Menu/> in screen where we want to implement toggle authentication
    <Menu>
     <MenuTrigger>
     // we will wrap image with this trigger
     </MenuTrigger>

     //menuoptions is dialogue box design
     //menuoption is for separate menu design
     <MenuOptions customStyles={{}}>
     <MenuOption onSelect={() => alert(`Save`)} text='Save'> <View></View></MenuOption>
        <MenuOption onSelect={() => alert(`Delete`)}><View></View> </MenuOption>
     </MenuOptions>
    </Menu>

20. fetching Users

// we need router in chatitem, but we declare here, because every time chat item render, it declare the router

in home we will call getUser(), in tutorial they are using user.uid, but i am using user.userId to fetch, because uid is going to null 
after coming in homepage.

so we get data from database. 
make new component chatlist. and give it flatlist. and provide <ChatItem/> component to it.

from chatlist, we pass router, so from router we can route to ChatRoom.js screen

and we also pass params with router.
  router.push({ pathname: "/chatRoom", params: item });


  to get params in next screen
  const item = useLocalSearchParams();

  21. first we call item with 

  import { useLocalSearchParams } from "expo-router";

const ChatRoom = () => {
  const item = useLocalSearchParams();}

  - make customheader for chatRoom
  -make messagelisst component
  - add design gor input chat box

  22. Chat RoomId

  we make function of  getroomId in utils with sorting two users id.

  then when we move to the chatrrom screen, we make instantly make roomID with getroomId(user?.userId,item?.userId)

  and setDoc to the firebase.

  await setDoc(doc(db, "rooms", roomId), {
      roomId,
      createdAt: Timestamp.fromDate(new Date()),
    });


  so if room already exists, it will not regenerate.

  23. create new 'message' collection in roomId document, when we tap on send message button

  const handleSendMessage = async () => {
    let message = textRef.current.trim();

    if (!message) return;

    try {
      // sort and mrerge both roomid
      let roomId = getRoomId(user?.userId, item?.userId);
      //get firebase collection from this id
      const docRef = doc(db, "rooms", roomId);
      //make new collection from upper reference
      const messagesRef = collection(docRef, "messages");

      textRef.current = "";

      if (inputRef) inputRef?.current?.clear();

      //now add perticular data in this collection
      const newDoc = await addDoc(messagesRef, {
        userId: user?.userId,
        text: message,
        profileUrl: user?.profileUrl,
        sendername: user?.username,
        createdAt: Timestamp.fromDate(new Date()),
      });

      console.log("new message id", newDoc.id);
    } catch (e) {
      Alert.alert("message", e.message);
    }
  };

  24. use getmessageRef in useEffect()

  useEffect(() => {
    createRoomIfNoExists();

    let roomId = getRoomId(user?.userId, item?.userId);
    const docRef = doc(db, "rooms", roomId);
    const messageRef = collection(docRef, "messages");

    const q = query(messageRef, orderBy("createdAt", "asc"));

    let unsub = onSnapshot(q, (snapshot) => {
      let allmessages = snapshot.docs.map((doc) => {
        return doc.data();
      });

      setMessages([...allmessages]);
    });

    return unsub;
  }, []);

  store all data in messages array,
  now we will pass messages as well as currentuser as a props to messagelist further. to take data or use as contition


  25. now let's design messageList.

  first we make scroll view in messagelist.
  then we make new <messageItem/> component, and pass it to message list.

  in messageItem, we have created design for each message.

  26.show Last message in home screen's chatItem component

  const renderLastMessage = () => {
    if (typeof lastMessage == "undefined") return "Loading...";
    if (lastMessage) {
      if (currentUser?.userId == lastMessage?.userId)
        return "You: " + lastMessage?.text;
    } else {
      return "Say Hi!!";
    }
  };

  27. chat is hide behind text input and keyboard avoiding view.

  1. when latest message arrived we have to scroll download
  useEffect(() => {
    updateScrollview();
  }, [messages]);

  const updateScrollview = () => {
    setTimeout(() => {
      scrollViewRef?.current?.scrollToEnd({ animated: true });
    }, 100);
  };

  give scrollviewRef to messagelist component, and call ref property in scrollviewRef

  2. when we call keyboard
  add keyboard listner in useEffect
  useEffect(() => {
    createRoomIfNoExists();

    let roomId = getRoomId(user?.userId, item?.userId);
    const docRef = doc(db, "rooms", roomId);
    const messageRef = collection(docRef, "messages");

    const q = query(messageRef, orderBy("createdAt", "asc"));

    let unsub = onSnapshot(q, (snapshot) => {
      let allmessages = snapshot.docs.map((doc) => {
        return doc.data();
      });

      setMessages([...allmessages]);
    });

    const KeyboardDidShowListener = Keyboard.addListener(
      "keyboardDidShow",
      updateScrollview
    );

    return () => {
      unsub();
      KeyboardDidShowListener.remove();
    };
  }, []);

  27. Time of the message

  make formate date in utils
  export const formatDate = (date) => {
  // Array of month names
  var monthNames = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec",
  ];

  // Get day, month, and year from the Date object
  var day = date.getDate();
  var month = monthNames[date.getMonth()];

  // Format the date string
  var formattedDate = day + " " + month;

  return formattedDate;
};



in chatitem

const renderTime = () => {
    if (lastMessage) {
      let date = lastMessage?.createdAt;
      return formatDate(new Date(date?.seconds * 1000));
    }
  };






  

  


 


